 <?php

require_once(dirname(dirname(__FILE__)) . "/social_network.php");
require_once(dirname(dirname(__FILE__)) . "/utils/db_utils.php");

function remove_dir($dir) {
	if (!file_exists($dir)) return;
	$files = array_diff(scandir($dir), array('.','..'));
   	foreach ($files as $file) {
   		(is_dir("$dir/$file")) ? remove_dir("$dir/$file") : unlink("$dir/$file");
    }
    rmdir($dir);
}

function create_dir($dir) {
	if (!file_exists($dir)) {
		mkdir($dir, 0755);
	}
}

function fetch_album($jobdir, $networkid, $albumid, $access_token) {
	$sn = sn($networkid);
	session_register($sn->session_variable());
	$_SESSION[$sn->session_variable()] = $access_token;
	// create sub directory for this network if it doesn't exist
	$dir = "{$jobdir}/{$sn->name()}";
	create_dir($dir);
	// fetch the photos list
	$photos = $sn->photos_list($albumid);
	// create the sub directory for this album
	$album_name = $photos['album_name'] ? $photos['album_name'] : $albumid;
	$albumdir = "{$dir}/{$album_name}";
	create_dir($albumdir);
	// fetch all the photos
	$photos_list = array_key_exists("list", $photos) ? $photos['list'] : $photos;
	foreach($photos_list as $index=>$photo) {
		// get url of highest available resolution
		$photo_info = $sn->photo($photo['photo_id']);
		// fetch the photo and save it to disk
		$name_or_id = trim($photo_info['caption']) ? $photo_info['caption'] : $photo['photo_id'];
		$filename = "{$albumdir}/" . ($index + 1) . " - {$name_or_id}." . pathinfo($photo_info['url'], PATHINFO_EXTENSION);
		file_put_contents($filename, file_get_contents($photo_info['url']));
	}
}

function zip_directory($source, $destination)
{
    if (!extension_loaded('zip') || !file_exists($source)) {
        return false;
    }
    $zip = new ZipArchive();
    if (!$zip->open($destination, ZIPARCHIVE::CREATE)) {
        return false;
    }
    $source = str_replace('\\', '/', realpath($source));
    if (is_dir($source) === true) {
        $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($source), RecursiveIteratorIterator::SELF_FIRST);
        foreach ($files as $file) {
            $file = str_replace('\\', '/', $file);
            // Ignore "." and ".." folders
            if( in_array(substr($file, strrpos($file, '/')+1), array('.', '..')) ) continue;
            $file = realpath($file);
            if (is_dir($file) === true) {
                $zip->addEmptyDir(str_replace($source . '/', '', $file . '/'));
            } else if (is_file($file) === true) {
                $zip->addFromString(str_replace($source . '/', '', $file), file_get_contents($file));
            }
        }
    } else if (is_file($source) === true) {
        $zip->addFromString(basename($source), file_get_contents($source));
    }
    return $zip->close();
}

function create_zip_file($jobdir) {
	$destdir = "/var/www/social_dl";
	$filename = tempnam($destdir, "photos_");
	unlink($filename);
	$filename .= ".zip";
	zip_directory($jobdir, $filename);
	return basename($filename, ".zip");
}

function send_email($email, $link) {
	require_once 'PHPMailer/class.phpmailer.php';

	$mail = new PHPMailer;

	$mail->IsSMTP();
	$mail->Host = 'smtp.zoho.com';
	$mail->Port = 465;
	$mail->SMTPAuth = true;
	$mail->Username = 'takeout@socialphotos.net';
	$mail->Password = 'chelissweet';
	$mail->SMTPSecure = 'ssl';

	$mail->From = 'takeout@socialphotos.net';
	$mail->FromName = 'Social Photos!';
	$mail->AddAddress($email);

	$mail->WordWrap = 80;
	$mail->IsHTML(true);

	$mail->Subject = 'Good News. Your Takeout Download is Ready!';
	$wstr = "";
	$wstr .= "Greetings!<br/><br/>We have successfully downloaded all the photo albums you requested.<br/><br/>";
	$wstr .= "Visit this link to download the zip file that contains your photos: <a href=\"{$link}\">{$link}</a>. Please copy and paste the link in the browser's URL bar if clicking on it doesn't work.";
	$wstr .= "<br/><br/>Please keep in mind that this link is valid only for <i>7 days</i>. Your data will be deleted from our servers after that ";
	$wstr .= "time period for privacy and security reasons. Although, you can request for another download through the website.";
	$wstr .= "<br/><br/>Thanks for choosing Social Photos for organizing your digital photos online! :-) ";
	$wstr .= "In case of any queries/concerns please feel free reply to this email or contact us at support@socialphotos.net.";
	$wstr .= "<br/><br/>-Social Photos Team!";
	$wstr .= "<br/><br/><br/><br/>";
	$wstr .= "<small>If you believe you have received this email in error, please send an empty reply to this email immediately.</small>";
	$mail->Body = $wstr;
	$mail->AltBody = $wstr;
	
	$mail->Send();
}

function main() {
	$tmpdir = "/tmp/socialphotos";
	create_dir($tmpdir);
	$db = open_db();
	$query = "SELECT id, job FROM takeout_jobs_raw WHERE processed = false ORDER BY ctime LIMIT 10;";
	$result = pg_query($db, $query);
	if (pg_num_rows($result)) {
		while ($row = pg_fetch_array($result)) {
			$job = json_decode($row[1], true);
			// create job directory
			$jobdir = "{$tmpdir}/job{$row[0]}";
			remove_dir($jobdir);
			create_dir($jobdir);
			// fetch albums one by one
			foreach($job['album_ids'] as $album) {
				$aparts = explode("_", $album);
				$networkid = intval($aparts[1]);
				$albumid = $aparts[2];
				fetch_album($jobdir, $networkid, $albumid, $job['access_tokens'][$networkid]);
			}
			// create a zip file
			$filename = create_zip_file($jobdir);
			$base_filename = pg_escape_string($filename);
			// create the link
			$filename = explode("_", $filename);
			$link = "http://dl.socialphotos.net?f=" . $filename[1];
			// send email
			send_email($job['email'], $link);
			// mark job as done
			pg_query($db, "UPDATE takeout_jobs_raw SET processed = true, filename = '{$base_filename}' WHERE id = {$row[0]};");
			// remove job directory
			remove_dir($jobdir);
		}
	}
	pg_free_result($result);
	close_db($db);
}

main();
echo "all done :)";

 ?>